// @flow

/**
 * Flowtype definitions for vuex
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.2.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'vuex' {
  declare export class Store <S> {
    constructor(options: StoreOptions<S>): Store<S>,

    state: S,
    getters: any,
    dispatch: Dispatch,
    commit: Commit,

    replaceState(state: S): void,

    subscribe<P>(fn: (mutation: P, state: S) => any): () => void,
    subscribeAction<P>(fn: (action: P, state: S) => any): () => void,
    watch<T>(
      getter: (state: S, getters: any) => T,
      cb: (value: T, oldValue: T) => void,
      options?: any
    ): () => void,
    registerModule<T>(
      path: string,
      module: Module<T, S>,
      options?: ModuleOptions
    ): void,
    registerModule<T>(
      path: Array<string>,
      module: Module<T, S>,
      options?: ModuleOptions
    ): void,
    unregisterModule(path: string): void,
    unregisterModule(path: Array<string>): void,
    hotUpdate(
      options: {
        actions?: ActionTree<S, S>,
        mutations?: MutationTree<S>,
        getters?: GetterTree<S, S>,
        modules?: ModuleTree<S>
      }
    ): void
  }
  declare export type install = (Vue: any) => void

  declare export interface Dispatch {
    (type: string, payload?: any, options?: DispatchOptions): Promise<any>,
    (payloadWithType: Payload, options?: DispatchOptions): Promise<any>
  }
  declare export interface Commit {
    (type: string, payload?: any, options?: CommitOptions): void,
    (payloadWithType: Payload, options?: CommitOptions): void
  }
  declare export interface ActionContext<S, R = S>{
    dispatch: Dispatch,
    commit: Commit,
    state: S,
    getters: any,
    rootState: R,
    rootGetters: any
  }
  declare export interface Payload {
    type: string
  }
  declare export type MutationPayload = {
    payload: any
  } & Payload

  declare export type ActionPayload = {
    payload: any
  } & Payload

  declare export interface DispatchOptions {
    root?: boolean
  }

  declare export interface CommitOptions {
    silent?: boolean,
    root?: boolean
  }

  declare export interface StoreOptions<S> {
    state?: S,
    getters?: GetterTree<S, S>,
    actions?: ActionTree<S, S>,
    mutations?: MutationTree<S>,
    modules?: ModuleTree<S>,
    plugins?: Array<Plugin<S>>,
    strict?: boolean
  }

  declare export type ActionHandler<S, R = S> = (
    injectee: ActionContext<S, R>,
    payload: any
  ) => any

  declare export interface ActionObject<S, R = S> {
    root?: boolean,
    handler: ActionHandler<S, R>
  }

  declare export type Getter<S, R = S> = (
    state: S,
    getters: any,
    rootState: R,
    rootGetters: any
  ) => any

  declare export type Action<S, R = S> = ActionHandler<S, R> | ActionObject<S, R>

  declare export type Mutation<S> = (state: S, payload: any) => any

  declare export type Plugin<S> = (store: Store<S>) => any

  declare export interface Module<S, R = S> {
    namespaced?: boolean,
    +state?: S | (() => S),
    getters?: GetterTree<S, R>,
    actions?: ActionTree<S, R>,
    mutations?: MutationTree<S>,
    modules?: ModuleTree<R>
  }

  declare export interface ModuleOptions {
    preserveState?: boolean
  }
  declare export type GetterTree<S, R = S> = {
    [key: string]: Getter<S, R>
  }
  declare export type ActionTree<S, R = S> = {
    [key: string]: Action<S, R>
  }
  declare export type MutationTree<S> = {
    [key: string]: Mutation<S>
  }
  declare export type ModuleTree<R> = {
    [key: string]: Module<any, R>
  }

  declare export default {
    install: install,
    Store: typeof Store
  }

  declare export type mapState = (namespace?: string, map: Array<string> | Object) => Object
  declare export type mapGetters = (namespace?: string, map: Array<string> | Object) => Object
  declare export type mapActions = (namespace?: string, map: Array<string> | Object) => Object
  declare export type mapMutations = (namespace?: string, map: Array<string> | Object) => Object
  declare export type createNamespacedHelpers = (namespace: string) => Object
}
